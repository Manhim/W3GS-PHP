<?php

/**
 *
 * Copyright (c) 2013 Marc André "Manhim" Audet <root@manhim.net>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/****

	Configuration

****/

define('W3GS_VERBOSE', true);

/****

	Constants

****/

define('W3GS_HEADER_CONSTANT', 0xF7);

/****
	
	Packet IDs
	
****/

# PacketID Constants for PHP 
# Generated by BNETDocs: Redux on September 3, 2010 
# BNETDocs: Redux software written by Don Cullen AKA Kyro
# Original BNETDocs content compiled by Arta & Skywing

define('W3GS_PING_FROM_HOST', 0x01);
define('W3GS_SLOTINFOJOIN', 0x04);
define('W3GS_REJECTJOIN', 0x05);
define('W3GS_PLAYERINFO', 0x06);
define('W3GS_PLAYERLEFT', 0x07);
define('W3GS_PLAYERLOADED', 0x08);
define('W3GS_SLOTINFO', 0x09);
define('W3GS_COUNTDOWN_START', 0x0A);
define('W3GS_COUNTDOWN_END', 0x0B);
define('W3GS_INCOMING_ACTION', 0x0C);
define('W3GS_CHAT_FROM_HOST', 0x0F);
define('W3GS_LEAVERES', 0x1B);
define('W3GS_REQJOIN', 0x1E);
define('W3GS_LEAVEREQ', 0x21);
define('W3GS_GAMELOADED_SELF', 0x23);
define('W3GS_OUTGOING_ACTION', 0x26);
define('W3GS_OUTGOING_KEEPALIVE', 0x27);
define('W3GS_CHAT_TO_HOST', 0x28);
define('W3GS_SEARCHGAME', 0x2F);
define('W3GS_GAMEINFO', 0x30);
define('W3GS_CREATEGAME', 0x31);
define('W3GS_REFRESHGAME', 0x32);
define('W3GS_DECREATEGAME', 0x33);
define('W3GS_PING_FROM_OTHERS', 0x35);
define('W3GS_PONG_TO_OTHERS', 0x36);
define('W3GS_CLIENTINFO', 0x37);
define('W3GS_MAPCHECK', 0x3D);
define('W3GS_STARTDOWNLOAD', 0x3F);
define('W3GS_MAPSIZE', 0x42);
define('W3GS_MAPPART', 0x43);
define('W3GS_MAPPARTOK', 0x44);
define('W3GS_MAPPARTNOTOK', 0x45);
define('W3GS_PONG_TO_HOST', 0x46);
define('W3GS_INCOMING_ACTION2', 0x48);

/****

	Utility functions

****/

function GenerateLengthDWORD($packet)
{
	$len = count($packet);
	$return = array();
	$return[0] = $len % 256;
	$return[1] = ($len - ($len % 256)) / 256;
	return $return;
}

function DWORDToInt($dwordbytes)
{
	$int = 0;
	$c_dwordbytes = count($dwordbytes);
	
	for ($i = 0; $i < $c_dwordbytes; $i++)
	{
		$int += $dwordbytes[$i] * pow(256, $i);
	}

	return $int;
}

function String2ByteArray($string)
{
	$string = trim($string);
	$len = strlen($string);
	$return = array();
	
	for ($i = 0; $i < $len; $i++)
	{
		$tmp = unpack('C*', $string[$i]);
		$return[] = $tmp[1];
	}
	
	return $return;
}

function ByteArrayToBinary($bytes)
{
	$bin = null;
	foreach($bytes as $byte)
	{
		$bin .= pack('C*', $byte);
	}
	return $bin;
}

function BinaryToByte($bin)
{
	$return = unpack('C*', $bin);
	
	if (is_array($return) && $return[1])
		return $return[1];
	else
		return null;
}

/****

	SEND functions

****/

function SEND_W3GS_REQJOIN($username) // String
{
	$packet = array();
	$packet[] = W3GS_HEADER_CONSTANT; 	// Packet Header
	$packet[] = W3GS_REQJOIN;			// Packet Id
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet = array_merge($packet, array( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ));	// Unkown
	$packet = array_merge($packet, array( 0xE4, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00 ));			// Unkown
	$packet = array_merge($packet, String2ByteArray($username));	// Username, null terminated
	$packet = array_merge($packet, array( 0x00, 0x01, 0x00, 0x02, 0x00 ));			// Unkown
	$packet = array_merge($packet, array( 0x17, 0xE0, 0x7F ));						// Unkown
	$packet = array_merge($packet, array( 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ));		// Unkown
	
	$len = GenerateLengthDWORD($packet);
	$packet[2] = $len[0];
	$packet[3] = $len[1];
	
	if (W3GS_VERBOSE) echo ' --> ' . __FUNCTION__ . ' Length: ' . count($packet) . "\n";
	
	return $packet;
}

function SEND_W3GS_PONG_TO_HOST($pingvalue) // ByteArray
{
	$packet = array();
	$packet[] = W3GS_HEADER_CONSTANT; 	// Packet Header
	$packet[] = W3GS_PONG_TO_HOST;		// Packet Id
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet = array_merge($packet, $pingvalue);
	
	$len = GenerateLengthDWORD($packet);
	$packet[2] = $len[0];
	$packet[3] = $len[1];
	
	if (W3GS_VERBOSE) echo ' --> ' . __FUNCTION__ . ' Length: ' . count($packet) . "\n";
	
	return $packet;
}

function SEND_W3GS_CHAT_TO_HOST($message, $fromPID, $toPIDs) // String, Byte, ByteArray
{
	$packet = array();
	$packet[] = W3GS_HEADER_CONSTANT; 	// Packet Header
	$packet[] = W3GS_CHAT_TO_HOST;		// Packet Id
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet[] = count($toPIDs);
	$packet = array_merge($packet, $toPIDs);
	$packet[] = $fromPID;
	$packet[] = 0x10;
	$packet = array_merge($packet, String2ByteArray($message));
	
	$len = GenerateLengthDWORD($packet);
	$packet[2] = $len[0];
	$packet[3] = $len[1];
	
	if (W3GS_VERBOSE) echo ' --> ' . __FUNCTION__ . ' Length: ' . count($packet) . "\n";
	
	return $packet;
}

function SEND_W3GS_MAPSIZE($mapsize)  // ByteArray
{
	$packet = array();
	$packet[] = W3GS_HEADER_CONSTANT; 	// Packet Header
	$packet[] = W3GS_CHAT_TO_HOST;		// Packet Id
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet = array_merge($packet, array( 0x01, 0x00, 0x00, 0x00 ));	// Unknown
	$packet[] = 0x01; 					// We have the map
	$packet = array_merge($packet, $mapsize);	// Mapsize taken from RECEIVE_W3GS_MAPCHECK
	
	$len = GenerateLengthDWORD($packet);
	$packet[2] = $len[0];
	$packet[3] = $len[1];

	if (W3GS_VERBOSE) echo ' --> ' . __FUNCTION__ . ' Length: ' . count($packet) . "\n";
	
	return $packet;
}

function SEND_W3GS_LEAVEREQ()
{
	$packet = array();
	$packet[] = W3GS_HEADER_CONSTANT; 	// Packet Header
	$packet[] = W3GS_CHAT_TO_HOST;		// Packet Id
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet[] = 0x00;					// Packet Size, going to assign later
	$packet[] = 0x0D;					// PLAYERLEAVE_LOBBY
	
	$len = GenerateLengthDWORD($packet);
	$packet[2] = $len[0];
	$packet[3] = $len[1];
	
	if (W3GS_VERBOSE) echo ' --> ' . __FUNCTION__ . ' Length: ' . count($packet) . "\n";
	
	return $packet;
}

/****

	RECEIVE functions
	
	$sock in every functions should be a reference to a file stream socket (fsock)

****/

function RECEIVE_W3GS_SLOTINFOJOIN(&$sock, &$status, $packet, $callback = null) // No infos, set in $status
{
	if (W3GS_VERBOSE) echo ' <-- ' . __FUNCTION__ . ' Length: ' . $packet['len'] . "\n";

	$status['pid'] = $packet['data'][6 + $packet['data'][4]];
	$status['joined'] = true;
	
	if ($callback !== null)
	{
		call_user_func($callback, array('sock' => &$sock, 'status' => &$status, 'packet' => $packet));
	}
}

function RECEIVE_W3GS_CHAT_FROM_HOST(&$sock, &$status, $packet, $callback = null)
{
	if (W3GS_VERBOSE) echo ' <-- ' . __FUNCTION__ . ' Length: ' . $packet['len'] . "\n";

	$recv_count = $packet['data'][4];
	$recv = array();
	
	for ($i = 0; $i < $recv_count; $i++)
	{
		$recv[] = $packet['data'][5 + $i];
	}
	
	$send = $packet['data'][5 + $recv_count];
	$flag = $packet['data'][6 + $recv_count];
	
	$message = null;
	if ($flag == 0x10) // It's a chat message
	{
		for ($i = 7 + $recv_count; $i < $packet['len']; $i++)
		{
			$message .= chr($packet['data'][$i]);
		}
	}
	
	$infos = array();
	$infos['recv_count'] = $recv_count;
	$infos['recv'] = $recv;
	$infos['send'] = $send;
	$infos['flag'] = $flag;
	$infos['message'] = $message;

	if ($callback !== null)
	{
		call_user_func($callback, array('sock' => &$sock, 'status' => &$status, 'packet' => $packet, 'infos' => $infos));
	}
}

function RECEIVE_W3GS_PLAYERINFO(&$sock, &$status, $packet, $callback = null)
{
	if (W3GS_VERBOSE) echo ' <-- ' . __FUNCTION__ . ' Length: ' . $packet['len'] . "\n";

	$playername = null;
	
	for ($i = 9; $packet['data'][$i] != 0x00; $i++)
	{
		$playername .= chr($packet['data'][$i]);
	}

	$status['pids'][$packet['data'][8]] = $playername;
	
	$infos = array();
	$infos['playername'] = $playername;
	$infos['pid'] = $packet['data'][8];

	if ($callback !== null)
	{
		call_user_func($callback, array('sock' => &$sock, 'status' => &$status, 'packet' => $packet, 'infos' => $infos));
	}
}

function RECEIVE_W3GS_PLAYERLEFT(&$sock, &$status, $packet, $callback = null)
{
	if (W3GS_VERBOSE) echo ' <-- ' . __FUNCTION__ . ' Length: ' . $packet['len'] . "\n";

	$pid = $packet['data'][4];
	$playername = $status['pids'][$pid];
	$status['pids'][$pid] = null;
	$status['slots'][$pid] = null;
	
	$infos = array();
	$infos['pid'] = $pid;
	$infos['playername'] = $playername;

	if ($callback !== null)
	{
		call_user_func($callback, array('sock' => &$sock, 'status' => &$status, 'packet' => $packet, 'infos' => $infos));
	}
}

function RECEIVE_W3GS_PING_FROM_HOST(&$sock, &$status, $packet, $callback = null)
{
	if (W3GS_VERBOSE) echo ' <-- ' . __FUNCTION__ . ' Length: ' . $packet['len'] . "\n";

	$pingvalue = array();
	
	for ($i = 4; $i < $packet['len']; $i++)
	{
		$pingvalue[] = $packet['data'][$i];
	}
	
	$infos = array();
	$infos['pingvalue'] = $pingvalue;

	if ($callback !== null)
	{
		call_user_func($callback, array('sock' => &$sock, 'status' => &$status, 'packet' => $packet, 'infos' => $infos));
	}
}

function RECEIVE_W3GS_REJECTJOIN(&$sock, &$status, $packet, $callback = null)
{
	if (W3GS_VERBOSE) echo ' <-- ' . __FUNCTION__ . ' Length: ' . $packet['len'] . "\n";

	$rejectreason = $packet['data'][4];
	
	$infos = array();
	$infos['rejectreason'] = $rejectreason;
	
	if ($callback !== null)
	{
		call_user_func($callback, array('sock' => &$sock, 'status' => &$status, 'packet' => $packet, 'infos' => $infos));
	}
}

function RECEIVE_W3GS_MAPCHECK(&$sock, &$status, $packet, $callback = null)
{
	if (W3GS_VERBOSE) echo ' <-- ' . __FUNCTION__ . ' Length: ' . $packet['len'] . "\n";

	$filepath = array();
	
	for ($i = 5; $i < $packet['len'] - 33; $i++)
	{
		$filepath[] = $packet['data'][$i];
	}
	
	$c_filepath = count($filepath);
	$filepath_string = null;
	
	for ($i = 0; $i < $c_filepath; $i++)
	{
		$filepath_string .= chr($filepath[$i]);
	}
	
	$filesize = array();
	
	for ($i = $packet['len'] - 32; $i < $packet['len'] - 28; $i++)
	{
		$filesize[] = $packet['data'][$i];
	}

	$mapinfo = array();
	
	for ($i = $packet['len'] - 28; $i < $packet['len'] - 24; $i++)
	{
		$mapinfo[] = $packet['data'][$i];
	}
	
	$mapcrc32 = array();
	
	for ($i = $packet['len'] - 24; $i < $packet['len'] - 20; $i++)
	{
		$mapcrc32[] = $packet['data'][$i];
	}
	
	$mapsha1 = array();
	
	for ($i = $packet['len'] - 20; $i < $packet['len']; $i++)
	{
		$mapsha1[] = $packet['data'][$i];
	}
	
	$status['mapinfo'] = $mapinfo;
	
	$infos = array();
	$infos['filepath'] = $filepath_string;
	$infos['filesize'] = $filesize;
	$infos['mapinfo'] = $mapinfo;
	$infos['mapcrc32'] = $mapcrc32;
	$infos['mapsha1'] = $mapsha1;
	
	if ($callback !== null)
	{
		call_user_func($callback, array('sock' => &$sock, 'status' => &$status, 'packet' => $packet, 'infos' => $infos));
	}
}

?>
